{
    "__type__": "Deck", 
    "children": [], 
    "crowdanki_uuid": "9b636dbd-0868-11e7-87d6-c46e1f132962", 
    "deck_config_uuid": "9b64d878-0868-11e7-a130-c46e1f132962", 
    "deck_configurations": [
        {
            "__type__": "DeckConfig", 
            "autoplay": true, 
            "crowdanki_uuid": "9b64d878-0868-11e7-a130-c46e1f132962", 
            "dyn": false, 
            "lapse": {
                "delays": [
                    10
                ], 
                "leechAction": 0, 
                "leechFails": 8, 
                "minInt": 1, 
                "mult": 0.0
            }, 
            "maxTaken": 60, 
            "name": "Default", 
            "new": {
                "LBEIMinAfter": 4, 
                "LBEIMinBefore": 4, 
                "LBGIMinAfter": 1, 
                "LBGIMinBefore": 1, 
                "bury": true, 
                "delays": [
                    1, 
                    10
                ], 
                "initialFactor": 2360, 
                "ints": [
                    1, 
                    4, 
                    7
                ], 
                "order": 1, 
                "perDay": 100, 
                "separate": true
            }, 
            "replayq": true, 
            "rev": {
                "bury": true, 
                "ease4": 1.3, 
                "fuzz": 0.05, 
                "ivlFct": 1.0, 
                "maxIvl": 36500, 
                "minSpace": 1, 
                "perDay": 120
            }, 
            "timer": 0
        }
    ], 
    "desc": "", 
    "dyn": 0, 
    "extendNew": 10, 
    "extendRev": 50, 
    "media_files": [
        "paste-24442658882159.jpg", 
        "paste-23304492548639.jpg"
    ], 
    "name": "Ethereum", 
    "note_models": [
        {
            "__type__": "NoteModel", 
            "crowdanki_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.cloze {\n font-weight: bold;\n color: blue;\n}", 
            "flds": [
                {
                    "font": "Arial", 
                    "media": [], 
                    "name": "Text", 
                    "ord": 0, 
                    "rtl": false, 
                    "size": 20, 
                    "sticky": false
                }, 
                {
                    "font": "Arial", 
                    "media": [], 
                    "name": "Extra", 
                    "ord": 1, 
                    "rtl": false, 
                    "size": 20, 
                    "sticky": false
                }
            ], 
            "latexPost": "\\end{document}", 
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n", 
            "name": "Cloze", 
            "sortf": 0, 
            "tags": [], 
            "tmpls": [
                {
                    "afmt": "{{type:cloze:Text}}\n\n<div style='font-family: Arial; font-size: 20px; color: #00FF7F'>{{Extra}}</div>", 
                    "bafmt": "", 
                    "bqfmt": "", 
                    "did": null, 
                    "name": "Cloze", 
                    "ord": 0, 
                    "qfmt": "{{cloze:Text}}<br>\n{{type:cloze:Text}}\n\n"
                }
            ], 
            "type": 1, 
            "vers": []
        }
    ], 
    "notes": [
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<div><br />{{c1::Ethereumjs-util}} is a low-level helper library that provides low-level utility functions that assist in creating new ethereum wallet addresses from private keys.</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "CIuZgzMah+", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />Any {{c1::64}} character string is a valid Ethereum {{c1::private}} key.", 
                ""
            ], 
            "flags": 0, 
            "guid": "pJqZeR{nbI", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>**corresponds to video 2**</div><div><br /></div>The only invalid private key in Ethereum is a 64-character string of {{c1::zeroes}}", 
                ""
            ], 
            "flags": 0, 
            "guid": "Ks[N+emUdM", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />Capitalization {{c1::doesn't}} matter for ethereum private keys.", 
                ""
            ], 
            "flags": 0, 
            "guid": "O:RX,6VB(?", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />A deterministic function maps a {{c1::private}} key to a public key every time.", 
                ""
            ], 
            "flags": 0, 
            "guid": "n+9N@mMU}@", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<div><br />The last 40 digits of the public key generated when running the deterministic wallet generation function with a valid private key as input are what is called the {{c1::wallet address}}</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "lcetR}9@>9", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />A string preceded by '0x' is meant to be interpreted as a string in {{c1::hexadecimal}} format. The '0x' is not actually part of the data itself.", 
                ""
            ], 
            "flags": 0, 
            "guid": "EC:#Lv,7Ts", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />A private key maps {{c1::deterministically}} to a public key, but it is mathematically unknown how to compute a private key from a public key", 
                ""
            ], 
            "flags": 0, 
            "guid": "M[8W.(`fwi", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />Any {{c1::40}} digit {{c1::hexadecimal}} string is a valid ethereum wallet address", 
                ""
            ], 
            "flags": 0, 
            "guid": "C>S7!JY#y[", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />When Ethereum was first conceived, the core members had to find a workaround to the {{c1::halting}} problem.", 
                ""
            ], 
            "flags": 0, 
            "guid": "r=W>JjCtEL", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />The Ethereum {{c1::Virtual}} Machine allows {{c1::arbitrary}} computation of another person's code.", 
                ""
            ], 
            "flags": 0, 
            "guid": "dBS|0r7q.x", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />It is impossible to statically analyze code and determine whether or not it will {{c1::terminate}} in finite time. This leads to the very real possibility of someone {{c1::DDOS}} attacking the Ethereum network by issuing infinite loops that peers would try to determine the infiniteness of, wasting computational resources.", 
                ""
            ], 
            "flags": 0, 
            "guid": "qCT:`U4hxH", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />Ethereum created what's referred to as \"{{c1::gas}}\" as a workaround to the halting problem.", 
                ""
            ], 
            "flags": 0, 
            "guid": "EERMVE<:D[", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />The code that runs the {{c1::contracts}} on the Ethereum network is the {{c1::bytecode}} of the Ethereum Virtual Machine.", 
                ""
            ], 
            "flags": 0, 
            "guid": "vuycBG.d&v", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />Contracts written in languages like Solidity are compiled down to EVM {{c1::OPCODES}}", 
                ""
            ], 
            "flags": 0, 
            "guid": "d>C`Jj/A1y", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<div><br />The full list of EVM OPCODES are available in the Ethereum {{c1::yellowpaper}}</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "JMGpULR!:#", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />Each {{c1::OP}}CODE that the EVM can execute has a fixed amount of {{c1::gas}} associated with it", 
                ""
            ], 
            "flags": 0, 
            "guid": "qt^,wx$L:+", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<div><br />The {{c1::gas}} execution cost of an OPCODE can also be thought of as a fee per computational step executed on the network.</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "J|uB`OMXaj", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br />Taking the SHA3 hash of a string costs a fixed {{c1::30}} gas on the Ethereum network.", 
                ""
            ], 
            "flags": 0, 
            "guid": "klXnV9cMxW", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />Generating a transaction on the ethereum network costs {{c1::21000}} gas", 
                ""
            ], 
            "flags": 0, 
            "guid": "jM&uXi}4o[", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />It is the {{c1::burden}} of whomever is {{c1::calling}} a function within the Ethereum network to pay the computational cost of executing that function. This shields the Ethereum network from DDOS attacks.", 
                ""
            ], 
            "flags": 0, 
            "guid": "uduSZR1S{D", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 3**<br /><br />The amount of {{c1::gas}} per computational step is fixed, but the amount of ether one pays for the gas is not.", 
                ""
            ], 
            "flags": 0, 
            "guid": "F]gSX|$:4U", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />The exchange rate of gas to {{c1::ether}} is determined by {{c1::miners}} on the Ethereum network.", 
                ""
            ], 
            "flags": 0, 
            "guid": "Igd|vn;S}:", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />How would I figure out what the ether equivalent of 20 gwei would be?<br /><br />const Web3 = require('web3')<br /><br />const web3 = new Web3()<br /><br />const twentyWei = web3.to{{c1::Wei}}(20, '{{c1::gwei}}')<br /><br />web3.{{c1::from}}Wei(twentyWei, '{{c1::ether}}')<br /><br /><br /><div><br /></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "n6]6^p=oy!", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 2**<br /><br />Ethereumjs-tx is a low-level utility library for creating and making {{c1::transactions}}.", 
                ""
            ], 
            "flags": 0, 
            "guid": "GPdlHj8F9X", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />Testrpc comes preseeded with {{c1::10}} ethereum accounts. Each account holds 100 ether", 
                ""
            ], 
            "flags": 0, 
            "guid": "M$iHJJ8]Zr", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br /><br />How would I ask for the balance of an Ethereum account using the web3 api?<br /><br /><code class=\"myCodeClass\">var ethAddress ='0x3eaddeb18f4939bee553b2a86a8f656508a40216'&nbsp;</code><div><br /><div><code class=\"myCodeClass\">web3.{{c1::eth}}.get{{c1::Balance}}(ethAddress)<br /><br />Now, how would I convert that balance to ether?<br /><br /></code></div></div><div><code class=\"myCodeClass\">web3.{{c1::fromWei}}(web3.{{c1::eth}}.get{{c1::Balance}}(ethAddress), '{{c1::ether}}')</code></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "I=cA?!4%;S", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />How would I send an amount of 100 ether from one account to another account?<br /><br />web3.eth.{{c1::sendTransaction}}({ <br />&nbsp; &nbsp; {{c1::from}}: acct1, <br />&nbsp; &nbsp; {{c1::to}}: acct2,&nbsp;<div>&nbsp; // the amount of ether one wants to send, specified in what?<br />&nbsp; &nbsp; value: web3.to{{c1::Wei}}(100, '{{c1::ether}}'),<br />&nbsp; &nbsp;// this property denotes the amount of gas you want to authenticate for this transaction. What is the exact execution cost for sending a transaction?<br />&nbsp; &nbsp; gas{{c1::Limit}}: {{c1::21000}},</div><div>&nbsp; // this property sets the gas price for the transaction in wei. When working on the mainnet, this property needs to be set to atleast the market value, the price that miners have collectively agreed upon</div><div>&nbsp; &nbsp; gasPrice: 20000000000 // this is equivalent to 20 gwei<br />})<br /><br /></div><div>The return value of this operation would be a transaction {{c1::hash}}.</div><div><br /></div><div><br /><br /></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "zlt<<ZXaVV", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />Given a transaction hash TX_HASH, how would I use it to get more information about that transaction?<br /><br />web3.{{c1::eth}}.get{{c1::Transaction}}(TX_HASH)<br /><br />=&gt;<br /><br /><div>&nbsp;{</div><div>&nbsp; &nbsp; hash: '0x909b9104aa6ebc1d48ae82ddd2b5c28e33d060f159538b9816089ecc8bcf39df',<br /></div><div>&nbsp; &nbsp; nonce: 0,<br />&nbsp; &nbsp;// the blockHash is the hash of the block the transaction was mined in</div><div>&nbsp; &nbsp; blockHash: '0xc29e20ffc78d1b1eb7c8b8445406af396d35591e0f858a3a127c3bc03910c1d0',</div><div>&nbsp; // mined in</div><div>&nbsp; &nbsp; blockNumber: 1,</div><div><br /></div><div>&nbsp; &nbsp; transactionIndex: 0,</div><div>&nbsp; &nbsp; from: '0xd2cada0e6b95279537481324c4f192c454d1adee',</div><div>&nbsp; &nbsp; to: '0x9ee602897520075de46975d0db16310db1f9071b',</div><div>&nbsp; &nbsp; value: { [String: '10000000000000000000'] s: 1, e: 19, c: [ 100000 ] },</div><div>&nbsp; &nbsp; gas: 90000,</div><div>&nbsp; &nbsp; gasPrice: { [String: '20000000000'] s: 1, e: 10, c: [ 20000000000 ] },</div><div>&nbsp; // arbitrary input data given to the transaction</div><div>&nbsp; &nbsp; input: '0x0'&nbsp;</div><div>&nbsp; }</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "K|uWzm`f?b", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />The nonce is a mechanism to ensure that {{c1::duplicate}} transactions are not sent to the ethereum blockchain.<br /><br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "N6[7p#}eO-", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />The nonce is an auto-incrementing number that needs to be {{c1::unique}} from an address.One address can only send a transaction with the same nonce once.", 
                ""
            ], 
            "flags": 0, 
            "guid": "Jy=pxPSaIS", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 4**<br /><br />The web3 javascript library defines an {{c1::interface}} into the underlying ethereum protocol methods.", 
                ""
            ], 
            "flags": 0, 
            "guid": "hC1)D+KZWG", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "The sendTransaction method already knows how to interoperate with your private keys when testrpc is created, thus, no data is required to be {{c1::signed}} manually. This 'magical' automatic convenience behavior may be unwanted-- for example, if you wanted to send a transaction offline, you might sign a transaction with your private key, and then transfer that to an online computer and then send it out for better security", 
                ""
            ], 
            "flags": 0, 
            "guid": "kbe}>)/VB|", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>**conforms to video 4**</div><div><br /></div><div>Ethereumjs-tx requires data structures to be passed in as {{c1::buffers}} instead of strings.</div><br />Ethereumjs-tx takes in a raw transaction data structure, which is a javascript object with key value pairs where every integer is encoded in hexadecimal before the raw transaction data structure is signed.", 
                ""
            ], 
            "flags": 0, 
            "guid": "AUP8h6Kpgu", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "What does a valid raw transaction data structure look like?<br /><br />var rawTx = {<br />&nbsp; &nbsp; nonce: web3.to{{c1::Hex}}(web3.eth.getTransaction{{c1::Count}}(acct1)),<div>&nbsp; &nbsp; to: acct2,</div><div>&nbsp; &nbsp; gasPrice: web3.toHex(20000000000),</div><div>&nbsp; &nbsp; gasLimit: web3.toHex(21000),<br />&nbsp; &nbsp; value: web3.toHex(web3.toWei(25, 'ether')),</div><div>&nbsp; &nbsp;// the data property is a string of any arbitrary data that serves as {{c1::meta}}data for the transaction</div><div>&nbsp; &nbsp; data: \"\"<br />}<br /><br /><br /></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "h;lm<>8#=(", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**miscellaneous**<br /><br />Blocks have total gas limits to prevent runaway {{c1::computation}}/keep the network {{c1::decentralized}}.", 
                ""
            ], 
            "flags": 0, 
            "guid": "tNv>o6prMV", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />The value proposition of using Ethereum over Bitcoin is the ability to deploy arbitrary computation onto the network in the form of {{c1::smart contracts}}.", 
                ""
            ], 
            "flags": 0, 
            "guid": "i&6fMS9X$Z", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />Ethereum smart contracts are ultimately just EVM {{c1::OPCODES}} as defined in the Ethereum yellowpaper.", 
                ""
            ], 
            "flags": 0, 
            "guid": "ub+/?JFXFQ", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />An abi defines the public-facing {{c1::interface}} of your contract.<br />An abi enables users of a contract to know how to call into it and what methods are available to them.", 
                ""
            ], 
            "flags": 0, 
            "guid": "hQM6s)FwH4", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />An abi is needed when creating a contract object through the {{c1::web3}} object.", 
                ""
            ], 
            "flags": 0, 
            "guid": "C6S2suixC&", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />There are two types of ethereum addresses: ethereum {{c1::accounts}} and {{c1::contract}} addresses<br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "KXNX7alTR%", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>contract HelloWorld {</div><div>&nbsp; &nbsp; function displayMessage() {{c1::constant}} returns (string) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return \"Hello from a smart contract\";</div><div>&nbsp; &nbsp; }</div><div>}<br /><br />A function declaration with a {{c1::constant}} keyword before the returns keyword in Solidity states that a function will not modify state on the Ethereum network in any way.<br /><br />No matter how many times you run the contract, the function will always return its specified return value, and it will not affect other contracts on the network.</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "eILIbeBz$+", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>***corresponds to video 7***<br /><br />Given this contract:<br /><br />contract HelloWorld {</div><div>&nbsp; &nbsp; function displayMessage() constant returns (string) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return \"Hello from a smart contract\";</div><div>&nbsp; &nbsp; }</div><div>}<br /><br />deployed on the Ethereum network, stored in a variable HelloWorld, how would you invoke it?<br /><br />HelloWorld{{c1::.displayMessage}}.{{c1::call()}}</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "M#Fmk!eK8`", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 7**<br /><br />Functions with a {{c1::constant}} return value don't need to query the network, and are cached locally so that they can be returned in real-time.", 
                ""
            ], 
            "flags": 0, 
            "guid": "k@]-E(+Cu?", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>**corresponds to video 8**<br /><br />Solidity is a {{c1::statically}} typed language.</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "iJ5c$JSSTE", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "**corresponds to video 8**<br /><br />Contracts can have {{c1::state}} that they store inside themselves and persist on the blockchain", 
                ""
            ], 
            "flags": 0, 
            "guid": "p2:64x}z{>", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "When a contract variable is declared {{c1::public}}, an accessor method is created that allows anyone that knows the {{c1::address}} of the contract to query for the state of the variable at any given point in time", 
                ""
            ], 
            "flags": 0, 
            "guid": "EFq8*r>vm@", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "A function that has the same name as the {{c1::contract}} within which it is defined is a constructor. <br /><br />A constructor function is a function that runs only {{c1::once}} upon the creation of a contract.&nbsp;", 
                "<br />Constructor functions are handy when you want to do some sort of initialization"
            ], 
            "flags": 0, 
            "guid": "QT;;>.,j2e", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "There's a special object in Solidity called the '{{c1::msg}}' object. The 'msg' object contains {{c1::information}} about the transaction that is {{c1::calling}} into the current contract.", 
                ""
            ], 
            "flags": 0, 
            "guid": "Q2%rS&.C4p", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 8<br /><br />'msg object continued'<br /><br />In the case of a constructor function, the transaction that will be calling into the constructor function will be the transaction that's creating the {{c1::function}}", 
                ""
            ], 
            "flags": 0, 
            "guid": "zJbr>@qGLz", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 8<div><br />You can get access to the ethereum address of whoever is calling a contract through the {{c1::msg}}.sender property<br /><br />given a contract Escrow, how would I set the buyer variable to the address of the person calling the contract?<br /><br /><div>{{c1::contract}} Escrow {</div><div><br /></div><div>&nbsp; &nbsp; address public buyer;</div><div>&nbsp; &nbsp; address public seller;</div><div>&nbsp; &nbsp; address public arbiter;</div><div>&nbsp; &nbsp; function Escrow() {</div><div>&nbsp; &nbsp; &nbsp; {{c1::buyer}} = msg{{c1::.sender}} &nbsp; &nbsp;</div><div>&nbsp; &nbsp; }</div><div><br /></div><div>}</div></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "qH@,3Uiro]", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 8<br /><br />A constructor function can take parameters. A constructor function's parameters are statically typed, and are {{c1::defined}} when the contract is created.", 
                ""
            ], 
            "flags": 0, 
            "guid": "j|UW+X?Aay", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "A contract address can store a {{c1::balance}} in ether the same way a regular ethereum address can.", 
                ""
            ], 
            "flags": 0, 
            "guid": "p_(Cg?JfXS", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div>Video 8<br /><br />What's the problem with the way this contract is written?<br /><br />contract Escrow {</div><div><br /></div><div>&nbsp; &nbsp; address public buyer;</div><div>&nbsp; &nbsp; address public seller;</div><div>&nbsp; &nbsp; address public arbiter;</div><div><br /></div><div>&nbsp; &nbsp; function Escrow(address _seller, address _arbiter) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; buyer = msg.sender;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; seller = _seller;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; arbiter = _arbiter;</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; // &nbsp;when called, this function will send the current balance in the Escrow contract to the seller</div><div>&nbsp; &nbsp; function payoutToSeller() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // send the amount of ether defined to the account that's calling it</div><div>&nbsp; &nbsp; &nbsp; &nbsp; seller.send(this.balance)</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; // when called this function will send the current balance in the Escrow contract to the buyer</div><div>&nbsp; &nbsp; function refundToBuyer() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // this refers to the balance of ether in the contract</div><div>&nbsp; &nbsp; &nbsp; &nbsp; buyer.send(this.balance)</div><div>&nbsp; &nbsp; }</div><div><br /></div><div>}<br /><br />As it currently stands, anyone with access to the {{c1::abi}} can {{c1::call}} these functions and send the money, so, this isn't very secure.<br /><br />Take a moment to think about an adequate solution.<br /><br />How would you fix it?<br /></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "q[Z(IZ(jH.", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 9<br /><br />A finite state machine is a general programming concept for modelling {{c1::state}}ful domain objects. The idea is that an instance of an object can exist in exactly {{c1::one}} of a finite number of states at any given time.&nbsp;<br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "opP2slY6aU", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video&nbsp;9<br /><br /><div>Given this contract<br /><br /><div><br /></div><div>contract CoinFlip {</div><div>&nbsp; &nbsp; // an enumerable value</div><div>&nbsp; &nbsp; // an enum is a fixed set of values that a variable can have</div><div>&nbsp; &nbsp; enum GameState {noWager, wagerMade, wagerAccepted}</div><div>&nbsp; &nbsp; // &nbsp;any other value that a variable of type GameState could have will be invalid</div><div>&nbsp; &nbsp; GameState public currentState;</div><div><br /></div><div>&nbsp; &nbsp; function CoinFlipper() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // initialize state</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // &nbsp;This is how you reference the value of an enumerable</div><div>&nbsp; &nbsp; &nbsp; &nbsp; currentState = GameState.noWager;</div><div>&nbsp; &nbsp; }</div><div><br /></div><div>&nbsp; &nbsp; function transitionGameState(bytes32 targetState) returns (bool) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if (targetState == \"noWager\") {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currentState = GameState.noWager;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else if (targetState == \"wagerMade\") {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currentState = GameState.wagerMade;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else if (targetState == \"wagerAccepted\") {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; currentState = GameState.wagerAccepted;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return true;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return false;</div><div>&nbsp; &nbsp; } &nbsp;<br /><br /></div><div>newly deployed on testnet as deployed, what would be the return value of<br /><br />deployed.currentState.call()?<br /><br /><br />A:&nbsp;{ [String: '{{c1::0}}'] s: 1, e: 0, c: {{c1::[ 0 ]}} }</div><div>&nbsp;<br />Now, imagine that the transitionGameState method was called, specifying wagerMade as the next state<br /><br />deployed.transitionGameState(\"wagerMade\", {from: acct1})<br /><br />What return value will be received when calling currrentState?<br /><br />A:&nbsp;{ [String: '{{c1::1}}'] s: 1, e: 0, c: {{c1::[ 1 ]}} }<br /><br />What if something nonsensical like 'xyz' was passed in as an argument to transitionGameState?<br /><br />deployed.transitionGameState(\"xyz\", {from: acct1})&nbsp;<br /><br /><br />What will be the return value when calling currrentState?<br /><br />A:&nbsp;{ [String: '{{c1::1}}'] s: 1, e: 0, c: {{c1::[ 1 ]}} }<br /><br /><br /></div></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "IPQ~ed}LiR", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 9<br /><br />In Solidity, a {{c1::modifier}} is a way to make reusable code that you can put into function definitions that can ensure some form of data is valid before proceeding with the execution of that function.", 
                ""
            ], 
            "flags": 0, 
            "guid": "h8LR#8m[Dy", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 9<br /><br />A modifier can be defined by using the keyword {{c1::modifier}}.<br /><br />contract someContract {<br />&nbsp; &nbsp;{{c1::modifier}} someModifier() {}<br />}", 
                ""
            ], 
            "flags": 0, 
            "guid": "pqc1YjlZ_8", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 9<br /><br />Modifiers can be introduced to functions by {{c1::defining}} them on the function definitions<br /><br />contract someContract {<br />&nbsp; &nbsp; modifier someModifier() {}<br /><br /><br />&nbsp; function someFunction() {{c1::someModifier}}() &nbsp;{<br />&nbsp; &nbsp; &nbsp; return 'a string'<br />&nbsp; }<br />}", 
                ""
            ], 
            "flags": 0, 
            "guid": "sH^xizJNCw", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "<div><br /></div><div>contract Owned {</div><div>&nbsp; &nbsp; // &nbsp;the owned contract specifies a variable owner</div><div>&nbsp; &nbsp; address public owned;</div><div><br /></div><div>&nbsp; &nbsp; function Owned() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // on construction set the owner to the one who constructed the contract</div><div>&nbsp; &nbsp; &nbsp; &nbsp; owned = msg.sender</div><div>&nbsp; &nbsp; }</div><div>&nbsp; &nbsp; // shorthand function to label another function as only callable by the creator of the contract</div><div>&nbsp; &nbsp; modifier onlyOwner() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if(msg.sender === owner) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div>}</div><div><div><br />The contract helloworld should only be callable by the owner of the contract.</div><div><br /></div><div>We see that the Owner contract specified above internally defines a modifier function onlyOwner that has that functionality. How would we make it so that the helloworld contract inherits the functionality of Owned?</div><br /></div><div>contract helloworld {{c1::is}} {{c1::Owned}} {</div><div>&nbsp; &nbsp; string public message;</div><div>&nbsp; &nbsp;</div><div>&nbsp; &nbsp; function setMessage(string _message) {{c1::onlyOwner}}() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; message = _message;</div><div>&nbsp; &nbsp; }</div><div>}</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "JA!h^lcysm", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "There are three important things to determine when modelling a finite state machine:<br /><ol type=\"1\" start=\"1\"><li>What are the {{c1::distinct}} states that your finite state machine can exist in?</li><li>What events are {{c1::exposed}} in each state? (You might have specific events that can only be called when the instance is in a specific state, and only some of these events will trigger a state transition to new state<br /></li><li>What {{c1::artifacts}} are going to be produced on transitions between states?</li></ol>", 
                ""
            ], 
            "flags": 0, 
            "guid": "xd;Qf+A}Zn", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 11<br /><br />If you want to reference a contract that's not defined in the same file, you need to {{c1::include}} it by using the \"{{c1::import}}\" keyword followed by a string defining a relative or absolute path to the contract.<br /><br />NOTE: This method works only for the OS solidity compiler, and not the javascript compiler.", 
                ""
            ], 
            "flags": 0, 
            "guid": "H#&8L^F9eR", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 11<div><br /></div><div>Selfdestruct is a native {{c1::OPCODE}} to the EVM that terminates the existence of a contract on the Ethereum blockchain.<br /><br />Selfdestruct, used in the contract below, takes one argument, the contract owner's ethereum address and sends the contract's current balance to it, and terminates the contract.<br /><br /><br /><div>contract mortal {</div><div>&nbsp; &nbsp; address public owner;</div><div><br /></div><div>&nbsp; &nbsp; function mortal() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; owner = msg.sender;</div><div>&nbsp; &nbsp; }</div><div><br /></div><div><br /></div><div>&nbsp; &nbsp; modifier onlyOwner() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if(msg.sender == owner) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br /></div><div>&nbsp; &nbsp; function kill() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; // destroy contract and send ether balance to owner's address</div><div>&nbsp; &nbsp; &nbsp; &nbsp; selfdestruct(owner);</div><div>&nbsp; &nbsp; }</div><div>}</div></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "vB2Ur8V.5$", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12<br /><br />The Ethereum blockchain is its own source of {{c1::truth}}. It encapsulates its own {{c1::state}} and knows absolutely nothing about the outside world. It has no native way to {{c1::communicate}} with it.<br /><br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "z*Qe{HDe:5", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12<br /><br /><div>{{c1::Oracle}} services are a reliable way of relaying data in a consistent way from the outside world onto the blockchain.</div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "mEd9i[Ptn#", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12&nbsp;<br /><br />You cannot create a self-{{c1::executing}} contract in Ethereum. Every contract {{c1::call}} has to be triggered by an outside {{c1::event}}.", 
                ""
            ], 
            "flags": 0, 
            "guid": "8^WKO@Wi6", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12&nbsp;<br /><br />In order to get information from the outside world, you have to call into a contract on the chain that has hardcoded into it knowledge about which {{c1::oracle}} service it wishes to use", 
                ""
            ], 
            "flags": 0, 
            "guid": "OJR<[Y#c!~", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12<br /><br />The oracle service is responsible for interoperating with the outside world, getting whatever information it needs in a {{c1::reliable}} way and formatting it into a {{c1::consistent}} format. The oracle service will then need to call back into the Ethereum blockchain, so it will likely call a {{c1::callback}} function that is encoded into that contract.", 
                ""
            ], 
            "flags": 0, 
            "guid": "r:g;#E/?Ke", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12&nbsp;<br /><br />It's possible that a contract call that an {{c1::oracle}} makes into a contract is mined in a different {{c1::block}} than the initial contract call made to trigger the oracle service.", 
                ""
            ], 
            "flags": 0, 
            "guid": "HY@[wW{A|Q", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 12&nbsp;<br /><br />{{c1::Oraclize}} is a third party service that provides oracle functionality for the Ethereum blockchain.", 
                ""
            ], 
            "flags": 0, 
            "guid": "j#%aUaJNfl", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />The ENS ( {{c1::Ethereum Name Service}} ) is a service that lets you resolve {{c1::human}}-readable names to individual ethereum {{c1::addresses}}.<br /><br /><img src=\"paste-23304492548639.jpg\" /><br /><br /><br />ENS is similar to a Domain Name System, where that DNS lets you map something easy to remember (like github.com) and sends it to a DNS service that resolves it to an IP address and sends it across the network.<br /><br /><img src=\"paste-24442658882159.jpg\" />", 
                ""
            ], 
            "flags": 0, 
            "guid": "H&<HVLwTJ@", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />If you want to register a name with the ENS you have to go through what's called a Registrar contract.<br /><br />There are two types of registrar contracts: {{c1::First In First Served}} (FIFS) Registrars, and {{c1::Auction}} Registrars.", 
                ""
            ], 
            "flags": 0, 
            "guid": "f,mzQvU#{~", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />All .eth name purchases go through the {{c1::Auction}} Registrar to minimize domain name squatting", 
                ""
            ], 
            "flags": 0, 
            "guid": "NY-]<Y.09j", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />When you register names with the ENS service, what's being stored isn't the name itself, but a {{c1::hash}} of the name.", 
                ""
            ], 
            "flags": 0, 
            "guid": "Ci^R?V&VyV", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />When you put an ethereum name up for auction, the auction will run for one week, except for the first week of ENS' release, where all auctions will run for {{c1::two}} weeks. Anybody can place a bid for the name.", 
                ""
            ], 
            "flags": 0, 
            "guid": "wDGx2ek_<E", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />In order to place a bid on a name, you need to call into the {{c1::newBid}} function of the {{c1::ethRegistrar}} contract and specify the maximum amount that you're willing to bid for the name. You also need to send ether. You can send more ether than you're willing to bid on the contract to help disguise what the amount of your actual bid is.", 
                ""
            ], 
            "flags": 0, 
            "guid": "yBYGe]VNOD", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 13<br /><br />During the last {{c1::24}} hours of an auction, all bids are {{c1::closed}}, and the {{c1::reveal}} period begins where anyone call into their contract and reveal the amount of their bid. The highest revealed bid during that bid period will win the name and the losers will get their ether back.", 
                ""
            ], 
            "flags": 0, 
            "guid": "lT5QrxtWk^", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 16<br /><br />A mapping is the Solidity construct for a {{c1::key}} {{c1::value}} store.<br /><br />mappings have the following syntax:<br /><br />mapping( {{c1::key}} type =&gt; {{c1::value}} type) identifier", 
                ""
            ], 
            "flags": 0, 
            "guid": "jN2j`;@=4C", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 16<br /><br />One of the limitations of using mappings in Solidity is that theres no native way to {{c1::loop}} over the mapping and get the values out of it, but that's often something you want to do in your user interface.<br /><br />You can think of a Solidity mapping as having the entire address space already initialized. Also, every possible ethereum address is initialized with the value of 0.<br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "N2&G?j}JHc", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />There are two places where you store data in Ethereum -- chain {{c1::data}}, and the state {{c1::trie}}<br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "iJ)!Zr~V,h", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17&nbsp;<br /><br />Smart contracts can write to both chain data and state, but they can only read from {{c1::state}}", 
                ""
            ], 
            "flags": 0, 
            "guid": "gQV10)=Py_", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />Writing to chain data costs 8 {{c1::gas}} per byte, whereas writing to state costs {{c1::625}} gas per byte", 
                ""
            ], 
            "flags": 0, 
            "guid": "G-?E`8{-)b", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />Clients can read from both {{c1::chain data}} and state", 
                ""
            ], 
            "flags": 0, 
            "guid": "G51-{[b=Z[", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />A more common use case than cheap data storage for writing to chain data is modelling {{c1::asynchronous}} event {{c1::triggers}}.<br /><br /><br />", 
                "&lt;br&gt;<br />&lt;br&gt;<br />The client can pull constantly from chain data for very specific messages to be written, and if the contract writes that message to chain data, the client can fire off an {{c1::asynchronous}} event."
            ], 
            "flags": 0, 
            "guid": "I9zP6rSI(h", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />The {{c1::indexed}} keyword can be attached to one or many fields in an event; it allows you to attach {{c1::listeners}} that listen for specific values of that field", 
                ""
            ], 
            "flags": 0, 
            "guid": "MYhTrGVNXV", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 16<br /><br />If you want to gain access to the current amount of gas remaining in your contract call, you can get it by calling msg.{{c1::gas}}", 
                ""
            ], 
            "flags": 0, 
            "guid": "pkRh3#H4IZ", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />LOG opcodes tell the contract to log data to {{c1::chain}} data. You won't see them unless you have {{c1::events}} in your contract.", 
                ""
            ], 
            "flags": 0, 
            "guid": "A>JX7dnJEu", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />logsBloom is a bloom filter - A bloom filter is a super fast and space efficient data structure used to check for {{c1::set}} membership.<br /><br />The space efficiency of a bloom filter comes at a cost. Bloom filters can tell you if an object is definitely not in a set, or if it is probably in a set, but it can't tell you if an object is definitely in a set. Also, items cannot ever be deleted from a bloom filter.<br /><br />", 
                ""
            ], 
            "flags": 0, 
            "guid": "J2PTkyO8np", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />logsBloom lets the block know if any {{c1::events}} have been fired. We can set {{c1::listeners}} on the logsBloom header to see if an event we care about has been fired.", 
                ""
            ], 
            "flags": 0, 
            "guid": "d+Sv0U.^eI", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }, 
        {
            "__type__": "Note", 
            "data": "", 
            "fields": [
                "video 17<br /><br />If there is data written into the {{c1::logsBloom}} header, you can look inside the transactions and see the data that was written using web3.eth.getTransaction{{c1::Receipt}}(transactionHash).<div><br /></div>", 
                ""
            ], 
            "flags": 0, 
            "guid": "zr@kjJp>$?", 
            "note_model_uuid": "9b64ff0f-0868-11e7-9651-c46e1f132962", 
            "tags": []
        }
    ]
}